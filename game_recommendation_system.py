# -*- coding: utf-8 -*-
"""game_recommendation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xiUPn4pyAAnmf5zYaJsi_R_nJQ0_kSZB

# System Recommendation
by Abdulloh Umar
### Projek 2 machine learning terapan

# 0. Import libraries and modules
"""

from google.colab import files
import zipfile
import os
import pandas as pd
import numpy as np
from collections import Counter
from wordcloud import WordCloud
import matplotlib.pyplot as plt

from sklearn.feature_extraction.text import CountVectorizer

"""# 1. Load Data

### 1.1 Upload dan ekstrak dataset dari Kaggle
"""

files.upload()
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download --force -d trolukovich/steam-games-complete-dataset

"""### Ekstrak file zip"""

with zipfile.ZipFile('/content/steam-games-complete-dataset.zip', 'r') as zip_ref:
    zip_ref.extractall('steam-game-dataset')

"""### Load data ke DataFrame"""

df = pd.read_csv('/content/steam-game-dataset/steam_games.csv')
print("Data shape:", df.shape)
df.head()

"""# 2. Data Understanding

### Ambil data yg akan di pakai
"""

games_meta_data = df[['name', 'genre']]
games_meta_data.head()

"""### Cek info dataset"""

games_meta_data.info()

"""### Analisis nilai unik"""

print('Banyak nama unik di kolom name:', len(games_meta_data.name.unique()))

print('Banyak jenis genre unik di kolom genre:', games_meta_data.genre.unique())

print('Banyak jenis genre unik di kolom genre:', len(games_meta_data.genre.unique()))

"""### Cek missing values"""

games_meta_data.isnull().sum()

"""### Visualisasi distribusi genre dengan WordCloud"""

games_meta_data = games_meta_data.copy()
games_meta_data['genre'] = games_meta_data['genre'].str.replace(',', '|') # Ganti pipeline untuk visualisasi yang lebih menarik
all_genres = games_meta_data['genre'].dropna().str.split(',') # Dihapus dulu biar NaN tidak bikin error
flat_genres = [genre.strip() for sublist in all_genres for genre in sublist]
wordcloud = WordCloud(width=2000, height=1000).generate_from_frequencies(Counter(flat_genres))

plt.figure(figsize=(15,8))
plt.imshow(wordcloud)
plt.axis("off")
plt.show()

"""# 3. Data Preparation

### Membersihkan data (hapus NaN dan duplikat)
"""

data_cleaned = games_meta_data.dropna().drop_duplicates('name')
data_cleaned.info()

"""### Sampling data (10.000 baris)"""

games_data = data_cleaned.sample(10000, random_state=42).reset_index(drop=True)

"""### Cek game-game terpilih"""

print("Contoh nama-nama game yang tersedia:")
print(games_data['name'].sample(20, random_state=1).to_list())

"""# 4. Modeling

##  Model 1 : Content-Based Filtering (Cosine Similarity on CountVectorizer)

### Ekstraksi fitur dengan CountVectorizer
"""

tf = CountVectorizer(tokenizer=lambda x: x.split('|'))
tfidf_matrix = tf.fit_transform(games_data['genre'])

"""### Hitung cosine similarity

"""

from sklearn.metrics.pairwise import cosine_similarity
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim_df = pd.DataFrame(cosine_sim, index=games_data['name'], columns=games_data['name'])

"""### Mapping indeks untuk rekomendasi

"""

indices = pd.Series(index=games_data['name'], data=games_data.index).drop_duplicates()

"""## Model 2 : Popularity-Based Recommendation

### Hitung kemunculan setiap genre
"""

from collections import Counter
genre_counts = Counter('|'.join(games_data['genre']).split('|'))

"""### Ambil 5 genre terpopuler"""

top_genres = [genre for genre, _ in genre_counts.most_common(5)]

"""### Ambil game-game dengan genre populer"""

popular_recommendation = games_data[games_data['genre'].str.contains('|'.join(top_genres))].head(20)

"""# 5. Evaluasi

### Fungsi rekomendasi
"""

def games_recommendation(games_name, top_n=20, cosine_sim=cosine_sim, items=games_data[['name', 'genre']]):
    # Cek apakah nama game ada dalam index
    if games_name not in indices:
        print("Game tidak ditemukan.")
        return pd.DataFrame()

    # Ambil indeks game berdasarkan nama
    idx = indices[games_name]

    # Hitung skor kemiripan dengan semua game
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Urutkan berdasarkan skor tertinggi (kecuali diri sendiri di urutan pertama)
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Ambil top-N (lewat parameter top_n)
    sim_scores = sim_scores[1:top_n+1]

    # Ambil nama game yang mirip
    game_indices = [i[0] for i in sim_scores]

    # Gabungkan nama & genre
    return pd.DataFrame(games_data.name[game_indices]).merge(items)

"""### Coba fungsi rekomendasi"""

# Cek genre target
games_data[games_data.name.eq('Ninja Way')]

# Cek apakah tepat sasaran
recomendation = pd.DataFrame(games_recommendation('Ninja Way'))
recomendation

"""### Evaluasi akurasi (Precision@K)

"""

def evaluate_recommendation(target_game, recommended_games, k=10):
    target_genre = games_data[games_data['name'] == target_game]['genre'].iloc[0].split('|')
    correct = 0
    for game in recommended_games['name'].head(k):
        recommended_genre = games_data[games_data['name'] == game]['genre'].iloc[0].split('|')
        if any(genre in target_genre for genre in recommended_genre):
            correct += 1
    return correct / k

"""### Tes akurasi (10 teratas)"""

precision = evaluate_recommendation('Ninja Way', recomendation, k=10)
print(f"Precision@10: {precision:.2f}")

# Evaluasi model 2: Popularity-Based
popularity_recommendation = popular_recommendation[['name', 'genre']]  # Sudah diambil sebelumnya

# Evaluasi akurasi untuk game yang sama (jika ada di data popularity)
precision_popularity = evaluate_recommendation('Ninja Way', popularity_recommendation, k=10)
print(f"Precision@10 (Popularity-Based): {precision_popularity:.2f}")